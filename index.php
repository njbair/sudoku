<?php

$script_title =     "nickster's Sudoku Solver";
$script_version =   "1.2";
$script_description = <<<DESCRIPTION
nickster's Sudoku Solver is a PHP app that attempts to solve
Sudoku puzzles input by the user by emulating the thought process
of a human being playing a Sudoku game. As of this version, nickster's Sudoku
Solver can solve most easy and medium Sudoku puzzles. It can also solve some
harder puzzles with varying degrees of success.
DESCRIPTION;

/* script execution timer function (jacked from http://us2.php.net/microtime) */
function microtime_float() {
    list($usec, $sec) = explode(" ", microtime());
    return ((float)$usec + (float)$sec);
}

$time_start = microtime_float();    //initialize script timer
$this_page = "/projects/sudoku";

/* main script */
if (isset($_GET['sudoku_submit'])) {    //only run the script if the URL contains form data (otherwise skip ahead and generate an empty grid)

    /* create arrays from $_GET vars */
    for ($i = 0; $i < 81; $i++) {
        if ($i > 0) { $arr_make_str .= ",\r\n"; }
        $arr_make_str .= "\t\$_GET[" . "'s" . ($i+1) . "']";
        if ($i == 0) { $grid_make_str .= "\tarray(\r\n"; }
        elseif ((($i)/9) == round(($i)/9)) { $grid_make_str .= "\r\n\t),\r\n\tarray(\r\n"; }
        else { $grid_make_str .= ",\r\n"; }
        $grid_make_str .= "\t\tarray(\$arr[" . ($i) . "],0,0,0,0,0,0,0,0,0)";
    }
    //these lines actually create the arrays from the strings generated by the above code
    $arr_make_str = "\$arr = array(\r\n" . $arr_make_str . "\r\n);\r\n";
    $grid_make_str = "\$grid = array(\r\n" . $grid_make_str . "\r\n\t)\r\n);\r\n";
    eval($arr_make_str);
    eval($grid_make_str);
    //$debug_output .= "*** BEGIN MAIN ARRAY ***\r\n" . $arr_make_str . "*** END MAIN ARRAY ***\r\n\r\n";
    //$debug_output .= "*** BEGIN GRID ARRAY ***\r\n" . $grid_make_str . "*** END GRID ARRAY ***\r\n\r\n";

    /* main loop (runs until all boxes are solved or until no more boxes can be solved) */
    $debug_output .= "*** SCRIPT INITIALIZED. BEGIN LOOP SEQUENCE ***\r\n\r\n\r\n\r\n";
    while ($solved < 81) {
        $last_solved = $solved; //used at end of loop to see if any more boxes have been solved
        $solved = 0;    //init var

        /* begin data collection (rows and columns) */
        //$debug_output .= "*** BEGIN DATA COLLECTION ***\r\n";
        for ($row = 0; $row <= 8; $row++) {
            for ($col = 0; $col <= 8; $col++) {
                $the_number = $grid[$row][$col][0]; //the digit (if any) of the current box
                //$debug_output .= "grid[" . $row . "][" . $col . "][0] = "; $debug_output .= ($the_number !== "")?($the_number . " "):("not set\r\n");
                if ($the_number !== "") {   //if the current box has a digit in it
                    for ($num = 1; $num <= 9; $num++) { //set all other options for this box to impossible
                        if ($num == $the_number) { $grid[$row][$col][$num] = 0; }
                        else { $grid[$row][$col][$num] = 1; }
                    }
                    for ($pos = 0; $pos <= 8; $pos++) { //cycle through the corresponding rows and columns, setting this number as impossible
                        if ($grid[$pos][$col][0] == "") { $grid[$pos][$col][$the_number] = "1"; }   //set each box in this column
                        if ($grid[$row][$pos][0] == "") { $grid[$row][$pos][$the_number] = "1"; }   //set each box in this row
                    }
                    //$debug_output .= "\r\n";
                }
            }
        }

        /* begin data collection (squares) */
        for ($square_row = 0; $square_row*3 <= 6; $square_row++) {
            for ($square_col = 0; $square_col*3 <= 6; $square_col++) {
                for ($row = 0; $row <= 2; $row++) {
                    for ($col = 0; $col <= 2; $col++) {
                        $cur_row = ($square_row*3)+$row;
                        $cur_col = ($square_col*3)+$col;
                        $the_number = $grid[$cur_row][$cur_col][0];
                        if ($the_number !== "") {
                        //$debug_output .= "\r\ngrid[" . $cur_row . "][" . $cur_col . "] contains the number " . $the_number . "!\r\nupdating all boxes in square...\r\n";
                            for ($row_data = 0; $row_data <= 2; $row_data++) {
                                for ($col_data = 0; $col_data <= 2; $col_data++) {
                                    $cur_row_data = ($square_row*3)+$row_data;
                                    $cur_col_data = ($square_col*3)+$col_data;
                                    if (($cur_row_data == $cur_row) && ($cur_col_data == $cur_col)) { }
                                    else {
                                        if ($grid[$cur_row_data][$cur_col_data][0] == $the_number) { $grid[$cur_row_data][$cur_col_data][$the_number] = 0; }
                                        else { $grid[$cur_row_data][$cur_col_data][$the_number] = 1; }
                                        //$debug_output .= "box " . $cur_row_data . "," . $cur_col_data . " updated.\r\n";
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        //$debug_output .= "*** END DATA COLLECTION ***\r\n\r\n";

        /* output array data (for debugging) */
        $debug_output .= "*** BEGIN DATA DUMP ***\r\n";
        for ($row = 0; $row <= 8; $row++) {
            for ($col = 0; $col <= 8; $col++) {
                $debug_output .= "[" . $row . ", " . $col . "]: (";
                $possibilities = 0;
                for ($num = 1; $num <= 9; $num++) {
                    $debug_output .= $grid[$row][$col][$num];
                    if ($grid[$row][$col][$num] == 0) { $possibilities++; }
                }
                $debug_output .= ")";
                $debug_output .= ($possibilities == 1)?" *":"";
                $debug_output .= "\r\n";
            }
        }
        $debug_output .= "*** END DATA DUMP ***\r\n\r\n";

        /* begin solving (elimination method) */
        //this method looks for boxes which have only one possible number
        for ($row = 0; $row <= 8; $row++) {
            for ($col = 0; $col <= 8; $col++) {
                $possibilities = 0;
                for ($num = 1; $num <= 9; $num++) {
                    if ($grid[$row][$col][$num] == 0) {
                        $possibilities++;
                        $it_must_be = $num;
                    }
                }
                if (($possibilities == 1) && ($grid[$row][$col][0] == "")) {
                    $grid[$row][$col][0] = $it_must_be;
                    $arr[(($row*9)+$col)] = $it_must_be;
                }
            }
        }

        /* begin solving (row and column defaulting method) */
        //this method looks for boxes that must be a certain number to complete a row or column
        for ($row = 0; $row <= 8; $row++) {
            for ($col = 0; $col <= 8; $col++) {
                $the_number = $grid[$row][$col][0];
                if ($the_number == "") { //only do this if box is empty
                    for ($num = 1; $num <= 9; $num++) {
                        $row_possibilities = 0;
                        $col_possibilities = 0;
                        for ($pos = 0; $pos <= 8; $pos++) {
                            if ($grid[$pos][$col][$num] == 0) { //check this row to see if the number is only possible in the current box
                                $row_possibilities++;
                            }
                            if ($grid[$row][$pos][$num] == 0) { //check this column to see if the number is only possible in the current box
                                $col_possibilities++;
                            }
                        }
                        //$debug_output .= "row " . $row . " has " . $row_possibilities . " possibilities for the number " . $num . "\r\n";
                        //$debug_output .= "column " . $col . " has " . $col_possibilities . " possibilities for the number " . $num . "\r\n";
                        if ((($row_possibilities == 1) or ($col_possibilities == 1)) && ($grid[$row][$col][$num] == 0)) {
                            $grid[$row][$col][0] = $num;
                            $arr[(($row*9)+$col)] = $num;
                        }
                    }
                }
            }
        }

        /* begin solving (square defaulting method) */
        for ($square_row = 0; $square_row*3 <= 6; $square_row++) {
            for ($square_col = 0; $square_col*3 <= 6; $square_col++) {
                for ($row = 0; $row <= 2; $row++) {
                    for ($col = 0; $col <= 2; $col++) {
                        $cur_row = ($square_row*3)+$row;
                        $cur_col = ($square_col*3)+$col;
                        $the_number = $grid[$cur_row][$cur_col][0];
                        if ($the_number == "") {    //only do this if box is empty
                            for ($num = 1; $num <= 9; $num++) {
                                $possibilities = 0;
                                for ($row_pos = 0; $row_pos <= 2; $row_pos++) {
                                    for ($col_pos = 0; $col_pos <= 2; $col_pos++) {
                                        if ($grid[($square_row*3 + $row_pos)][($square_col*3 + $col_pos)][$num] == 0) { //check this square to see if the number is only possible in the current box
                                            $debug_output .= "doing box " . ($square_row*3 + $row_pos) . "," . ($square_col*3 + $col_pos) . "\r\n";
                                            $possibilities++;
                                        }
                                    }
                                }
                                if (($possibilities == 1) && ($grid[$cur_row][$cur_col][$num] == 0)) {
                                    $grid[$cur_row][$cur_col][0] = $num;
                                    $arr[(($cur_row*9)+$cur_col)] = $num;
                                }
                            }
                        }
                    }
                }
            }
        }

        /* finish script */
        foreach ($arr as $checkarr) {
            if ($checkarr !== "") { $solved++; }
        }
        if ($solved == $last_solved) {
            $give_up = 1;
            $solved = 81;
        }
    $debug_output .= "*** END OF LOOP ***\r\n\r\n\r\n\r\n";
    }
}

?>
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
    <meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <title><?php echo $script_title . " v" . $script_version; ?></title>
    <style type="text/css" media="screen">
    <!--
        body {
            font-family: "Georgia", sans-serif;
            font-size: 83%;
            color: #400099;
        }

        a {
            font-weight: bold;
            color: #E60066;
        }

        img { border: 0; }

        pre {
            z-index: 0;
            position: absolute;
            top: 0;
            left: 0;
            margin: 1em auto 1em 1em;
            padding: 1em;
            background: #ddf;
            font-family: "Lucida Console", monospace;
            font-size: .83em;
        }

        #rap {
            position: relative;
            z-index: 1;
            margin: 0 auto;
            width: 30em;
            text-align: center;
        }

        .sudoku_square {
            margin: 0;
            padding: .5em .2em;
            border: solid 1px #400099;
            border-top: none;
            border-left: none;
            font-family: "Georgia", serif;
            font-weight: bold;
            text-align: center;
        }

        .sudoku_square:hover { background: #DABFFF; }
        .sudoku_square:focus { background: #FFBFDC; }

        .sudoku_square_solved { color: #E60066; }

        #footer { margin: 2em 0 1em 0; }

        /* draw borders on boxes */
        #s28, #s29, #s30, #s31, #s32, #s33, #s34, #s35, #s36, #s55, #s56, #s57, #s58, #s59, #s60, #s61, #s62, #s63 { border-top: solid 1px #400099; }
        #s1, #s2, #s3, #s4, #s5, #s6, #s7, #s8, #s9 { border-top: solid 2px #400099; }
        #s9, #s18, #s27, #s36, #s45, #s54, #s63, #s72, #s81 { border-right: solid 2px #400099; }
        #s73, #s74, #s75, #s76, #s77, #s78, #s79, #s80, #s81 { border-bottom: solid 2px #400099; }
        #s4, #s7, #s13, #s16, #s22, #s25, #s31, #s34, #s40, #s43, #s49, #s52, #s58, #s61, #s67, #s70, #s76, #s79 { border-left: solid 1px #400099; }
        #s1, #s10, #s19, #s28, #s37, #s46, #s55, #s64, #s73 { border-left: solid 2px #400099; }
    -->
    </style>
    <!--[if IE]>
        <style type="text/css" media="screen">
            #rap { padding: 1em; }
            .sudoku_square { margin: -2px 0 0 0; padding: .4em .1em; }
        </style>
    <![endif]-->
</head>
<body>
    <?php
        /* display debug output (if any) */
        //echo (isset($debug_output))?("<pre>*** DEBUG OUTPUT ***\r\n\r\n" . $debug_output . "</pre>"):"";
    ?>
    <div id="rap">
        <h1><?php echo $script_title; ?></h1>
        <h2>version <?php echo $script_version; ?></h2>

        <form action="<?php echo $this_page; ?>" method="get">
            <div>
                <?php
                    /* generate sudoku grid */
                    echo "\t\t\t";
                    for ($i = 1; $i <= 81; $i++) {
                    ?><input class="sudoku_square<?php echo ($_GET[("s" . $i)] !== $arr[($i - 1)])?" sudoku_square_solved":"" ?>" type="text" id="s<?php echo $i; ?>" name="s<?php echo $i; ?>" size="1" maxlength="1" value="<?php echo (isset($arr[$i-1]))?$arr[$i-1]:""; ?>"><?php
                    if (round(($i)/9) == (($i)/9)) { echo "<br />\r\n\t\t\t"; }
                    }
                ?>
            </div>
            <p><input class="sudoku_button" type="submit" value="Solve" name="sudoku_submit"></p>
            <?php
                if ($give_up == 1) {
                    echo "<p>I can't solve this puzzle!</p>";
                }
            ?>
            <p><a href="<?php echo $this_page; ?>">Clear grid</a></p>
        </form>

        <p><?php echo $script_description; ?></p>

        <?php /* you'll probably want to change the next few lines or get rid of them altogether */ ?>
        <p>Special thanks to Jeremy Wehn for thinking like a computer</p>
        <p>&laquo; Go back to <a href="/">nickbair.net</a></p>

        <?php
            $time_end = microtime_float();
            $run_time = round($time_end - $time_start, 3);
            echo "<p>Page generated in " . $run_time . " seconds</p>";
        ?>
    </div>
</body>

</html>
